<?php
/**
 * @file
 * Customizes reservation flow for users.
 */

/**
 * Implements hook_menu().
 *
 */
function ding_custom_reservation_menu() {
  $items = array();

  $items['admin/config/ding/customreservation'] = [
    'title' => 'Ding custom reservation Settings',
    'description' => 'Manage custom reservations module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_custom_reservation_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/ding_custom_reservation.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['ting/object/%ting_object/customreserve'] = array(
    'page callback' => 'ding_custom_reservation_reserve_ajax',
    'page arguments' => array(2,4),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform reservation'),
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * This module overriddes the reservation button provided in ding_reservation so that hook is removed.
 */
function ding_custom_reservation_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'ding_entity_buttons') {
    if (isset($implementations['ding_reservation'])) {
      unset($implementations['ding_reservation']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the ding_reservation_reserve_form with custom interest periods.
 */
function ding_custom_reservation_form_ding_reservation_reserve_form_alter(&$form, &$form_state, $reservable, $hide_options = FALSE) {
  if (isset($form['provider_options'])) {
    if (isset($form['provider_options']['fbs_preferred_branch'])) {
      unset ($form['provider_options']['fbs_preferred_branch']);
    }
    if (isset($form['provider_options']['interest_period'])) {
      $form['provider_options']['interest_period']['#options'] = ding_custom_reservation_interest_periods();
      $form['provider_options']['interest_period']['#default_value'] = variable_get('ding_custom_reservations_interest_period');
    }
  }
  $form['#validate'] = ['ding_custom_reservation_reserve_form_validate'];
}


/**
 * Implements hook_ding_entity_buttons().
 */
function ding_custom_reservation_ding_entity_buttons($type, $entity, $view_mode, $widget = 'default') {
  $button = '';

  if ($type == 'ding_entity' && $entity->is('library_material')) {
    switch ($widget) {
      case 'ajax':
        // The AJAX-widget will use AJAX-request for checking reservability and
        // also when performing the reservation.
        $button = [];
        $button[] = [
            '#theme' => 'link',
            '#text' => t('Reserve2'),
            '#path' => 'ting/object/' . $entity->id . '/customreserve',
            '#options' => [
              'attributes' => [
                'class' => [
                  'action-button',
                  'reserve-button',
                  'use-ajax',
                  'js-check-reservability',
                ],
                'data-local-id' => $entity->localId,
              ],
              'html' => FALSE,
            ],
            '#attached' => [
              'js' => [
                [
                  'type' => 'file',
                  'data' => drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_reservability.js',
                ],
              ],
              'library' => [
                ['system', 'drupal.ajax'],
              ],
            ],
        ];
        if (variable_get('ding_custom_reservation_secondary_reservation_button', FALSE)) {
          $button[] = [
            '#theme' => 'link',
            '#text' => t(variable_get('ding_custom_reservation_secondary_reservation_button_text', '')),
            '#path' => 'ting/object/' . $entity->id . '/customreserve/fast',
            '#options' => [
              'attributes' => [
                'class' => [
                  'action-button',
                  'reserve-button',
                  'use-ajax',
                  'js-check-reservability',
                ],
                'data-local-id' => $entity->localId,
              ],
              'html' => FALSE,
            ],
            '#attached' => [
              'js' => [
                [
                  'type' => 'file',
                  'data' => drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_reservability.js',
                ],
              ],
              'library' => [
                ['system', 'drupal.ajax'],
              ],
            ],
        ];
        }
        break;

      default:
        // The last parameter to the form below (TRUE) hides the provider
        // options in the form (interest period and branch).
        $reservable = ding_provider_invoke('reservation', 'is_reservable', [$entity->localId]);
        if (!empty($reservable[$entity->localId])) {
          $button = array(
            ding_provider_get_form('ding_reservation_reserve_form', new DingReservationReservableEntity($entity), TRUE),
          );
        }
        break;
    }
  }

  return $button;
}

/**
 * Ajax entry callback.
 *
 * Try to reserve the material, if the user is not logged in trigger a ajax
 * login.
 *
 * This is a copy of the corresponding method in ding_reservation. With few lines off customizing.
 *
 * @param TingEntity $entity
 *   Ting entity object.
 * @param DingReservationReservable $reservable
 *   Object with information about the entity to reserve. Used to make
 *   reservation of periodical, where volume and issue is part of the
 *   reservation.
 *
 * @return array
 *   Render array with Ajax commands.
 */
function ding_custom_reservation_reserve_ajax($entity, $fast = null, $reservable = NULL) {
  $commands = array();

  // Check if the logged in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    // Trigger log-in (the reservation link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Only library user can make reservations.') . '</p>');
  }
  elseif (!(is_object($entity) && $entity instanceof TingEntity)) {
    // Error not ting entity.
    $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Unable to load information about the material.') . '</p>');
  }
  else {
    // Try to make reservation.
    // Start off customized section.
    try {
      $reservable = new DingReservationReservableEntity($entity);
      if ($fast != null) {
        $interest_period = variable_get('ding_custom_reservation_secondary_reservation_button_interest_period', 60);
        $form_state = [];
        $form_state['values']['provider_options']['interest_period'] = $interest_period;

        drupal_form_submit('ding_reservation_reserve_form', $form_state, $reservable);
        $status_messages = theme('status_messages');
        $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), $status_messages, array('refresh' => TRUE));
      } else {
        $form = ding_provider_get_form('ding_reservation_reserve_form', $reservable, FALSE);
        $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), render($form));
      }
      // End off customized section.
    }
    catch (DingProviderAuthException $exception) {
      // The form may have thrown an Auth exception, so display login. (the
      // reservation link will be triggered on success).
      $commands[] = ajax_command_ding_user_authenticate('');
    }
    catch (Exception $exception) {
      // The form may have thrown an auth exception as the login may have
      // timed-out (the reservation link will be triggered on success).
      $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Unknown error in reservation, please contact the library.') . '</p>');

      // Log exception.
      watchdog_exception('ding_reservation', $exception);
    }
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Reserve form validation.
 */
function ding_custom_reservation_reserve_form_validate($form, &$form_state) {
  global $user;
  if (!(user_is_logged_in() && ding_user_is_provider_user($user))) {
    throw new DingProviderAuthException();
  }
}

/**
 * Default values for interest period.
 */
function ding_custom_reservation_default_interest_periods() {
  $periods = [
    1 => 30,
    2 => 60,
    3 => 90,
    6 => 180,
    12 => 360,
  ];
  $options = [];
  foreach ($periods as $months => $days) {
    $options[$days] = format_plural($months, '1 month', '@count months');
  }
  return $options;
}

/**
 * Get interest periods.
 *
 * @return array
 *   Array of days => human readable string.
 */
function ding_custom_reservation_interest_periods() {
  return variable_get('ding_custom_reservation_interest_periods', ding_custom_reservation_default_interest_periods());
}